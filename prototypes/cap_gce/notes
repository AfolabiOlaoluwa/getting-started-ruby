rough steps from memory:

locally:

Install ruby and gem (os specific)
Install postgres (os specific)
configure a postgres role for yourself
$ gem install bundler
$ gem install rails

git clone our app, should have the below already done:
  $ rails new todos --database postgres
  this is for demo todos app:  $ rails g scaffold todo name:string finished:boolean
  edit Gemfile, add 'therubyracer' 'capistrano' (pg should be there instead of sqlite)


$ bundle install
resolve any C dev file deps (libxml2, pgsql, etc.)
$ rake db:setup
$ rake s
check that it is working locally

get ready to deploy:

should already be done in our app
  $ bundle exec cap install
  setup basic config/deploy.rb and production.rb
  setup Gemfile with capistrano(-rails/bundler) and Capfile with those

need custom cap "service start" with sudo

Rake::Task["unicorn:start"].clear
Rake::Task["unicorn:stop"].clear
Rake::Task["unicorn:restart"].clear


namespace :unicorn do

  %w[start stop restart].each do |command|
    desc "#{command} unicorn sudo"
    task command do
      on roles :app do
        sudo :service, fetch(:unicorn_service), command
      end
    end
  end

end


create a gce vm
ssh in
install ruby, gem, postgres, nginx
create a directory with perms for your user to deploy to
setup postgres role with perms for your user
test postgres is working, test nginx is working, etc.
exit ssh

these files mostly setup, but need tweaking:

edit config/deploy.rb
  replace with your github repo:
  set :repo_url, 'jeffmendoza@localhost:~/bare/todos.git'
  replace with your deploy directory:
  set :deploy_to, '/home/jeffmendoza/rails-deploy'

edit config/deploy/production.rb
  replace with your server info
  server '<GCE IP>', user: 'jeffmendoza', roles: %w{app db web}

bundle exec cap produciton deploy:check
bundle exec cap produciton bundler:install
bundle exec cap produciton deploy
